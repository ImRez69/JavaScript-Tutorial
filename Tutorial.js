// Part 1 -------------------------------------------------------

//  JavaScript ( Interpreter Programing Language ) ( Interpreter = Line By Line )

//   ( Front End ) js ==> Browser ( Client )
//   ( Back End ) js ==> Server ( Server )

//   js Engine ( Different from the browser ) ==> Compilation Code

//  js Capability ==> User interaction Without Refresh ( تعامل با کاربر - بدون رفرش صفحه )
//   -when click on a button js can
//    --add class
//    --add tag
//    --edit tag
//    --delete tag

// Part 2 -------------------------------------------------------

//   JavaScript  ( JS ) vs ECMAScript  ( ES )

//    -ECMAScript ==> Standard Version of JavaScript

// Part 3 -------------------------------------------------------

//   JavaScript Dynamic Client Side Scripting

//     inspect ==> console ( js error )

// Part 4 -------------------------------------------------------

//     ------------------ Add script to html file

//       1. نوشتن اسکریپت در خود اچ تی ام ال
//          <script>
//         alert('Welcome')
//         </script>

//       ---------

//       2. وارد کردن یه فایل مجزا جاوا اسکریپت

//           <script src="./script.js" ></script>
//            -1 use script tag before colde </body> tag ( بعد از خواندن تمامی تگ ها فایل جاوااسکریپت خانوده میشود )
//            -2 use script tag before colde </head> tag ( در این صورت اگر بخواهیم مقدار تگی را عوض کنیم قبل از اینکه آن تگ خوانده شود آن را عوض کردیم و با ارور مواجه خواهیم شد )

//       ---------

//       3. Defer ( attribute ) ( به مرورگر میگوید که بعد از خواندن تمامی تگ ها این فایل جاوااسکریپت را بخوان )

//         - اگر بخواهیم قبل از بسته شدن تگ هد جاوا اسکریپت را وارد کنیم میتوانیم از این استفاده کنیم
//         -<script src="./script.js" defer ></script>

// Part 5 -------------------------------------------------------

//     ------------------ Inspect ==> Console

//       - با نوشتن عبارت کنسول در در تب کنسول تابع های قابل استفاده ( که با علامت اف مشخص شده اند )
//       - پراپرتی های قابل استفاده ( آنهایی که علامت اف ندارد و شامل اتربیوت , ولیو , مقدار و.. میشود )

//     ------------------ Console in JS File

//       -console.log('test'); ( مقدار مورد نطر را در تب کنسول به صورت لاگ/گزارش نمایش میدهد )
//       -console.warn('test'); ( مقدار مورد نطر را در تب کنسول به صورت وارنینگ/هشدار نمایش میدهد )
//       -console.error('test'); ( مقدار مورد نطر را در تب کنسول به صورت ارور/خطا نمایش میدهد )

//       -console.group('tests'); ( هر لاگی بعد این تابع بیاید تا زمانی که گروه را ببندید آنها را در یک گروه نمایش میدهد )
//        --console.groupEnd(); ( برای بستن گروه میباشد )

//         ---console.group('tests');
//         ---console.log('test');
//         ---console.warn('test');
//         ---console.error('test');
//         ---console.groupEnd();

//     ------------
//     نکته : نیاز به گزاشتن علامت سمی کالن در انتهای هر تابع نیاز نیست اما برای خوانایی کد آن را قرار میدهیم
//     ------------

// Part 6 & 7 -------------------------------------------------------

//     ------------------ Var , Let , Const ( Variable )

//       - var , let , const ==> For determination a variable ( برای تعیین یک متغیر )

//        -- syntax ( نحوه نوشتن )
//        -- assign variable ( اختصاص دادن مقداری به یک متغیر )
//        -- reassign variable ( اختصاص دادن مقداری جدید به یک متغیر )

//        -----------------

//        -- var ( Before ES6 ) ==> ( برای تعیین یک متغیر استفاده میشود و آن را در "اسکوپ گلوبال" تعریف میکند)

//        -----------------

//        -- let ( After ES6 ) ==> ( برای تعیین یک متغیر استفاده میشود که میتوانیم بعدا مقداری دیگری را برای آن تعیین کرد یا اختصاص داد )
//         --- اگر متغیری قبلا تغریف شده باشد برای اختصاص دادن مقداری جدید به آن نباید از "لت" استفاده کنیم
//          ---- let = test ;
//          ---- test = 'test2'

//        -----------------

//        -- const ( After ES6 ) ==> ( برای تعیین متغیر هایی استفاده میشود که قرار است مقدار آنها ثابت باشد زیرا که نمیتوانیم مقدار یک متغیر تعریف شده با "کانست" را تغییر داد )

//         --- ( به دلیل اینکه مقدار تعریف شده با "کانست" ثابت است نمیشود مانند "لت" ابتدا متغیر تعریف و بعد از تعریف مقدار دهی شود باید همزمان با تعریف مقدار دهی شود )

//         --- ( اما میتوانیم تغییراتی را روی مقدار یک آرایه و آبجکت که با "کانست" تعریف کردیم ایجاد کنیم مانند اضافه کردن ولی نمیشود دوباره مقدار دهی کرد)
//          ----  const arr = [ 1, 2, 3, 4] ;
//          ----  arr.push = (5) ;

//        -----------------

//        -- let VS var ==> ( فرق "ور" با "لت" این است که متغیر را در فضای "گلوبال" تعریف میکند و اگر قبل از تعریف یک متغیر با آن , آن متغیر را صدا بزنیم مقدار "آندیفایند" یا تخصیص داده نشده را بر میگرداند )
//        -- let VS const ==> ( فرق  )

//       -----------------

//       - تعریف همزمان چند متغیر

//          --- Let

//           --- let x ;
//           --- let a ;
//           --- let c ;

//           --- x = 5 ;
//           --- a = 6 ;
//           --- c = 7 ;

//           OR ( همزمان در یک خط تعریف کرد )

//            --- let x, b, c ;
//            --- x = 5, b = 6, c = 7 ;

//            --- let x = 5, a = 6, c = 7 ;

//          -----------------

//          --- Const

//           --- const x = 5 ;
//           --- const a = 6 ;
//           --- const c = 7 ;

//           --- ( در زمان استفاده از "کانست" نمیتوان بعد از تعریف متغیر آن را مقدار دهی کرد باید همزمان این کار را انجام داد )

//           OR ( همزمان در یک خط تعریف کرد )

//            --- const x = 5, a = 6, c = 7 ;

//       -----------------

//       - Determination variable rule ( قوانین تعیین متغیر )

//         --- 1. در تغیین یک متغیر فقط میتوان از حروف  , اعداد , آندر "اسکور _" , و علامت دلار استفاده کرد( Letters = abcd , Number = 1234 , Underscore = _ , Dollar sign = $  )

//         --- 2. یک متغیر نمیتواند با یک عدد شروع شود

//         --- 3. نحوه نوشتن نام متغیر ها میتوانیم از یی از روش های زیر استفاده کنیم

//          ---- 1. برای متغیر های چند کلمه ای بهتر است از روش "کمل کیس" یا کوهان شتری استفاده شود که یعنی از کلمه اول به بعد ابدا هر کلمه با حرف بزرگ نوشته شود ( Camel case = firstNameForTest )
//          ---- 2. ( underscore = first_name )
//          ---- 3. ( PascalCase = FirstName )
//          ---- 4. ( lowercase = firstname )

// Part 8 -------------------------------------------------------

//     ------------------ Data Type

//       - console.log ( typeof  `variable` ) ==> تایپ متغیر مربوطه را برمیگرداند

//       - Primitive Values

//          -- String ( رشته )

//           --- const test = 'ali' ; تک کوتیشن | const test = "ali" ; دابل کوتیشن

//           --- console.log ( test  , typeof test ) ==> ali , string

//          -----------------

//          -- Number ( اعداد صحیح و اعشاری )

//           --- const test = 5 ;

//           --- console.log ( test  , typeof test ) ==> 5 , number

//          -----------------

//          -- Boolean ( True & False  | درست و غلط )

//           --- const test = true ; | const test = false ;

//           --- console.log ( test  , typeof test ) ==> true | false , boolean

//          -----------------

//          -- Undefined ( مغیری که تعریف نشده اما صدا شده | متغیری که تعریف شده ام مقداری "اساین" نشده )

//           --- let test ; | let test = undefined ;

//           --- console.log ( test  , typeof test ) ==> undefined , undefined

//          -----------------

//          -- Null ( خالی )

//           --- const test = null ;

//           --- console.log ( test  , typeof test ) ==> null , object ( در اصل یک مقدار پریمیتیو میباشد ولی آبجکت برمیگرداند )

//          -----------------

//          -- Symbol `ES6` ( یک متغیر بصورت "یونیک" یا یکتا را برمیگرداند )

//       -----------------

//       - Reference Values ( Object )

//          -- Array (  )

//           --- const test = [ 12, 'ali', true, null ] ;

//           --- console.log ( test  , typeof test ) ==> (4) [ 12, 'ali', true, null ] , object

//          -----------------

//          -- Object (  )

//           --- const test = {
//               name : 'ali',
//               age : 5,
//               lastName : null,
//               } ;

//           --- console.log ( test  , typeof test ) ==> {name: 'ali', age: 5, lastName: null} , object

//          -----------------

//          -- Functions (  )

// Part 9 -------------------------------------------------------

//     ------------------ Stack  & Heap

//       - Stack ( در این فضا مقدار های "پریمیتیو" خود متغیر همراه با مقدارشان ذخیره میشود اما مقدار های "رفرنس" فقط خود متغیر در این فضا ذخیره میشود و مقدارش در تدر فضای "هیب" ذخیره میشود )

//        -- Primitive Values

//         --- String
//         --- Bumber
//         --- Boolean
//         --- Undifined
//         --- null
//         --- Symbol ( ES6 )

//       -----------------

//       - Heap ( در این فضا فقط مقادیر مقدار های "رفرنس" ذخیره میشود )

//        -- Reference Values ( Object )

//         --- Object
//         --- Array
//         --- Functions

//       -----------------

//       - Stack vs Heap ( "استک" در مقابل "هیب" )

//         -- فرق در این میباشد که وقتی متغیری با مقادیر "پریمیتیو" ساخته میشود هم خود متغیر و هم مقدار آن با هم ذخیره میشوند
//         -- اما متغیری که با مقادیر "رفرنس" ذخیره میشود فقط خود متغیر در فضای "استک" ذخیره میشود اما مقدار آن در فضای هی"ب ذخیره میشود

//        ------------------ ( اگر متغیر از نوع "رفرنس" داشته باشیم و متغیری جدید تعریف کنیم که مقدار آن با متغیر قبلی برابر باشد و از طریق متغیر جدید مقداری را که در متغیر قبلی بوده است تغییر دهیم مقدار آن به کلی تغییر میکند و اگر از متغیر اول لاگ بگیریم مقدار جدید را تحویل میدهد )
//        ------------------ ( اما در مقادیر پریمیتیو اینکار را انجام دهیم فقط مقدار در متغیر جدیدی تغییر خواهد کرد )

//          let name = 'ali';
//          // console.log(name); // ali

//          let age = 25;
//          let newName = name;
//          // console.log(newName); // ali

//          newName = 'sara';
//          // console.log(name); // ali
//          // console.log(newName); // sara

//          let person ={
//                  name: 'liam',
//                  age: 20,
//          }
//          // console.log(person.name); // liam

//          let newPerson = person;
//          // console.log(newPerson.name); // liam

//          newPerson.name = 'nima';
//          // console.log(newPerson.name); // nima
//          // console.log(person.name); // nima

// Part 10 -------------------------------------------------------

//     ------------------ Type Conversion

//       - String to Number

//         let value = '8';

//         value = parseInt(value); // string to number
//         value = +value; // string to number
//         value = Number(value); // string to number

//         console.log(value ,typeof value); // 8 number

//       -----------------

//       - String to Decimal

//         let value = '5.6';
//         value = parseFloat(value);  // string to decimal
//         -- ( اگر از پارس اینت استفاده کنیم عدد را اعشاری برنمیگردارند )

//         console.log(value ,typeof value);  // 5.6 number

//       -----------------

//       - Number to String

//         let value = 8;
//         value = value.toString();  // number to string
//         value = String(value);  // number to string

//         console.log(value ,typeof value);  // 8 string

//       -----------------

//       - Number to Boolean

//         let value = 0;
//         value = Boolean(value);   // number  to boolean

//         console.log(value ,typeof value);  // false boolean

//         ------------

//         let value = 1; ( هر عددی به جز 0 مقدار بولینش برابر با ترو میباشد )
//         value = Boolean(value); ;   // number  to boolean

//         console.log(value ,typeof value);  // true boolean

// Part 11 & 12 -------------------------------------------------------

//     ------------------ Operator عملگر

//       - عملگر ریاضی

//        -- x = 6 + 6 ;  جمع // x = 12
//        -- x = 6 - 6 ;  تفریق // x = 0
//        -- x = 6 * 6 ;  ضرب // x = 36
//        -- x = 6 / 6 ;  تقسیم // x = 1
//        -- x = 6 % 5 ;  باقیمانده // x = 1
//        -- x = 6 ** 2 ;  توان // x = 36

//        -----------------

//        -- x = x + 1 ; // "اضافه کردن یک واحد یا هر عددی به "ایکس
//        -- x ++ ; // "اضافه کردن یک واحد به "ایکس

//        -- x = x - 1 ; // "کم کردن یک واحد یا هر عددی از "ایکس
//        -- x -- ; // "کم کردن یک واحد از "ایکس

//        -- x = x * 5 ; // ایکس" برابر با "ایکس" ضربدر 5 است"
//        -- x = x / 2 ; // ایکس" برابر با "ایکس" تقسیم بر 2 است"
//        -- x = x % 2 ; // ایکس" برابر با  باقیمانده "ایکس" از 2 است"
//        -- x = x ** 3 ; // ایکس" برابر با "ایکس" به توان 3 است"

//        -----------------

//        -- x += 5 ; مقدار سمت چپ را با مقدار سمت راست جمع کرده و در متغیر سمت چپ قرار میدهد
//        -- x -= 5 ; مقدار سمت چپ را از مقدار سمت راست کم کرده و در متغیر سمت چپ قرار میدهد
//        -- x *= 5 ; مقدار سمت چپ را با مقدار سمت راست ضرب کرده و در متغیر سمت چپ قرار میدهد
//        -- x /= 5 ; مقدار سمت چپ را با مقدار سمت راست تقسیم کرده و در متغیر سمت چپ قرار میدهد
//        -- x %= 5 ; باقیمانده مقدار سمت چپ از مقدار سمت راست را در متغیر سمت چپ قرار میدهد
//        -- x **= 5 ; مقدار سمت چپ را به توان  مقدار سمت راست کرده و در متغیر سمت چپ قرار میدهد

//       -----------------

//       - "جمع "استرینگ

//        -- x = 'hello' + 'world' ; جمع دو استرینگ // helloworld
//        -- x = 'hello' + ' ' + 'world' ; جمع دو استرینگ با فاصله // hello world
//        -- x = 'hello' + ' world' ; جمع دو استرینگ با فاصله // hello world
//        -- x = 'hello ' + 'world' ; جمع دو استرینگ با فاصله // hello world

//       -----------------

//       - عملگر مقایسه ای

//        -- let x = 5 ;
//        -- let y = 5 ;
//        -- console.log( x = y ); ( "ایکس" برابر است با "وای" )
//        -- console.log( x == y ); ( مقایسه برابری مقدار ) // true
//        -- console.log( x === y ); ( مقایسه برابری مقدار و تایپ ) // true
//        -- console.log( x != y ); ( مقایسه نا برابری مقدار ) // false
//        -- console.log( x !== y ); ( مقایسه نا برابری مقدار و تایپ) // false

//        -----------------

//        -- let x = 5 ;
//        -- let y = 6 ;

//        -- console.log( x > y ); ( "مقایسه بزرگتری "ایکس" با "وای ) // false
//        -- console.log( x < y ); ( "مقایسه کوچکتری "ایکس" با "وای ) // true
//        -- console.log( x >= y ); ( "مقایسه بزرگتری با برابری "ایکس" با "وای ) // false
//        -- console.log( x <= y ); ( "مقایسه کوچکتری با برابری "ایکس" با "وای ) // true

//        -----------------

//        -- let x  ;
//        -- x = 5 + '15' ; ( عدد و "استرینگ" را با هم جمع میکند )
//        -- console.log( x ,typeof x); // 515 string

//        -- x = 5 + Number('15') ; ( تبدیل "استرینگ" به عدد و سپس با هم جمع میکند )
//        -- console.log( x ,typeof x ); // 20

//        -----------------

//        -- x = 5 + undefined ; ( اگر عدد را با مقدار "آندیفایند" جمع کنیم "نان" را بر میگرداند ) ( NaN = Not a Number )
//        -- console.log( x ,typeof x ); // NaN number ( NaN = Not a Number )

//        -- x = 'foo' / 3 ;  ( اگر "استرینگ" را با عدد جمع کنیم "نان" را بر میگرداند ) ( NaN = Not a Number )
//        -- console.log( x ,typeof x ); // NaN number ( NaN = Not a Number )

// Part 13 -------------------------------------------------------

//       - ( جاوا اسکریپت "نامبر"ها و"استرینگ" ها را با "رپر" احاطه میکند که در آن "آبجکت" هایی مانند "لنت , طول" موجود است )

//       - String ( Property , Method )

//        -- const firstName = 'alireza';
//        -- const lastName = 'bruh';
//        -- x = 'my name is' + firstName + ' '  + lastName; ( "جمع "استرینگ )
//        -- x = `my name is ${firstName} ${lastName}`; ( "جمع" "استرینگ" با "بکتیک )
//        -- console.log(x); // my name is alireza bruh

//        -----------------

//        -- const s = 'test';
//        -- x = s.length; ( "تشخیص طول "استرینگ )
//        -- console.log(x); // 4

//        -----------------

//        -- const s = 'test';
//        -- const s = new String('test'); ( جاوا اسکریپت در اصل یک "استرینگ" را اینگونه مانند یک "آبجکت" اجرا میکند برای همین میتوانیم از "متود" ها و "پراپرتی" ها بر روی آن استفاده کنیم )
//        -- console.log(s);

//        -----------------

//        -- const s = 'test';
//        -- console.log( s [0] ); ( اینگونه صفریم حرف "استرینگ" را خروجی میگیریم )
//        -- x = s.charAt(0); ( با استفاده از این تابع نیز میتوانیم صفریم حرف "استرینگ" را خروجی میگیریم )
//        -- console.log(x); // t

//        -----------------

//        -- const s = 'Test';
//        -- x = s.toUpperCase(); ( این تابع تمام حرف های "استرینگ" را به حرف بزرگ تبدیل میکند )
//        -- console.log(x); // TEST

//        -----------------

//        -- const s = 'Test';
//        -- x = s.toLowerCase(); ( این تابع تمام حرف های "استرینگ" را به حرف کوچک تبدیل میکند )
//        -- console.log(x); // test

//        -----------------

//        -- const s = 'test';
//        -- x = s.substring(0,2); ( با استفاده از این تابع میتوانیم از حرف های مد نظر از "استرینگ" را خروجی بگیریم ( از عدد اول تا قبل از عدد دوم را خروجی میدهد ) اگر فقط یک مقدار بدهیم از آن حرف به بعد همه را خروجی میگیرد )
//        -- console.log(x); // te

//        -----------------

//        -- x = s.trim(); ( با استفاده از این تابع میتوانم "اسپیس" های قبل و بعد از "استرینگ" را حذف کنیم )
//        -- console.log(x);

//        -----------------

//        -- const s = 'test';
//        -- x = s.replace('s','h'); ( با استفاده از این تابع میتوانم حرف مد نطر را اگر در استرینگ بود با حرف مد نظر مان عوض کنیم )
//        -- console.log(x); // teht

//        -----------------

//        -- const s = 'test';
//        -- x = s.includes('s'); ( با استفاده از این تابع میتوانم اگر بررسی کنیم که حرف نطر در "استرینگ"وجود داشت که با "ترو" و یا "فالس" خروجی میدهد)
//        -- console.log(x);

//        -----------------

//        -- const s = 'test';
//        -- x = s.split(); ( با استفاده از این تابع میتوانیم حرف های "استرینگ" را به "آرایه" تبدیل کنیم  )
//        -- console.log(x);

//        -- const s = 'test';
//        -- x = s.split(''); ( اینگونه تمام حرف های "استرینگ" را از هم جدا میکند )
//        -- console.log(x);

//        -- const s = 'test';
//        -- x = s.split(' '); ( اینگونه حرف ها را از نقطه "استرینگ" را از هم جدا میکند )
//        -- console.log(x);

//        -- const s = 'test';
//        -- x = s.split('.'); ( اینگونه  حرف ها را از فاصله "استرینگ" را از هم جدا میکند )
//        -- console.log(x);

// Part 14 -------------------------------------------------------

//     ------------------

//       - ( جاوا اسکریپت "نامبر"ها و"استرینگ" ها را با "رپر" احاطه میکند که در آن "آبجکت" هایی مانند "تو.استرینگ" موجود است )

//       - Number ( Property , Method )

//        -- let num = 6;
//        -- let x = nume.length; // undefined ( برای طول گرفتن قبلش باید به "استرینگ" تبدیل شود )
//        -- let x = num.toString(); ( "تبدیل "نامبر" به "استرینگ )

//        -----------------

//        -- Math ( یک تابع شامل یک سری "متود" و "پراپرتی" های مربوط به اعمال ریاضی )

//         --- x = Math.sqrt ( 9 ) ; // 3 ( جذر )

//         ------------

//         --- x = Math.abs ( -9 ) ; // 9 ( قدر مطلق )

//         ------------

//         --- x = Math.round ( 5.3 ) ; // 5 ( ' رند کردن اعداد اعشاری ' خود 5 و بالاتر از 5 رند به بالا ' , ' کوچکتر از 5 رند به پایین )

//          ---- x = Math.ceil ( 5.2 ) ; // 6 ( رند کردن اعداد اعشاری به بالا )
//          ---- x = Math.ceil ( 5.6 ) ; // 6 ( رند کردن اعداد اعشاری به بالا )

//          ---- x = Math.floor ( 5.6 ) ; // 5 ( رند کردن اعداد اعشاری به پایین )
//          ---- x = Math.floor ( 5.4 ) ; // 5 ( رند کردن اعداد اعشاری به پایین )

//         ------------

//         --- x = Math.pow ( 2 , 3 ) ; // 8 ( توان )

//         ------------

//         --- x = Math.min ( 2 , 3 , 5 ) ; // 2 ( انتخاب کوچکترین عدد )
//         --- x = Math.max ( 2 , 3 , 5 ) ; // 5 ( انتخاب بزرگترین عدد )

//         ------------

//         --- x = Math.random () ; // random ( انتخاب بصورت تصادفی بعد از هر رفرش )

//          ---- x = Math.random () * 10 ; // عددی بین 0 تا 10 ( انتخاب عددی تصادفی  بین 0 تا 10 بعد از هر رفرش )
//          ---- x = Math.random () * 10 + 1 ; // عددی بین 1 تا 10 ( انتخاب عددی تصادفی بین 1 تا 10 بعد از هر رفرش )

//          ---- x = Math.floor ( Math.random () * 10 +1 ) // عددی بین 1 تا 10 بصورت رند به پایین ( انتخاب عددی تصادفی بین 1 تا 10 و رند کردن به سمت پایین )

// Part 15 & 16 & 17 & 18 -------------------------------------------------------

//     ------------------ Array & Object ( Method & Property )

//       - Array

//        -- در جاوا اسکریپت ایندکس ها از صفر شروع میشود ( یعنی برای دسترسی به دومین مقدار یک آرایه باید ایندکس 1 را فرا بخوانیم )

//        -- const arr = [ 1 , 5 , 8  ,9 , 7  ]; // ( تعریف یک آرایه )
//        -- console.log(arr);

//        -----------------

//        -- const numbers = new Array(6, 4, 8); // ( "تعریف یک آرایه  با استفاده از "کلس)
//        -- console.log(numbers);

//        -----------------

//        -- const mixed = [ null, 5, 'test', true, undefined ]; // ( تعریف یک آرایه که دارای مقادیر متفاوتی است )
//        -- console.log(mixed);
//        -----------------

//        -- let x;
//        -- x = arr[1] + arr[3];  // ( ' جمع 2 مقدار آرایه ' اینکدس 1 + اینکدس 3 )
//        -- console.log(x);

//        -----------------

//        -- let x;
//        -- x = `first number is ${arr[0]}`; // ( دسترسی به مقدار اینکدس 0 که در واقع اولین ایندکس است )
//        -- console.log(x);x

//        -----------------

//        -- let x;
//        -- x = arr.length;   // ( گرفتن طول یک آرایه )
//        -- x = arr[arr.length -1] (  'دسترسی به آخرین ایندکس آرایه با گرفتن طول آن و کم کردن یک واحد از آن ' زیرا که ایندکس ها از صفر شروع میشود و با یک واحد کم کردن به آخرین ایندکس دسترسی خواهیم داشت )
//        -- console.log(x);

//        -----------------

//        -- let x;
//        -- arr[3] = 'bruh';  ( ویرایش مقدار یک ایندکس )
//        -- console.log(arr[3]);

//       -----------------

//       - Array Method

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- arr.push(10); // اضافه کردن مقدار به انتها آرایه
//        -- console.log(arr); //  [1, 2, 3, 4, 5, 10]

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- arr.pop(); // حذف کردن آخرین مقدار آرایه
//        -- console.log(arr); // [1, 2, 3, 4]

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- arr.unshift(10); // اضافه کردن مقدار به ابتدا آرایه
//        -- console.log(arr); // [10, 1, 2, 3, 4, 5]

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- arr.shift(); // حذف کردن اولین مقدار آرایه
//        -- console.log(arr); // [2, 3, 4, 5]

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- arr.reverse(); // معکوس کردن ترتیب آرایه
//        -- console.log(arr); // [5, 4, 3, 2, 1]

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- let x;
//        -- x = arr.includes(3); // بررسی وجود مقداری در آرایه
//        -- console.log(x); //  true

//        -- x = arr.includes(10); // بررسی وجود مقداری در آرایه
//        -- console.log(x); // false

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- let x;
//        -- x = arr.indexOf(3); // برگرداندن "ایندکس" مقدار مشخص شده
//        -- console.log(x); // 2

//        -- x = arr.indexOf(10); // "برگرداندن "ایندکس" مقدار مشخص شده "در صورت نبودن
//        -- console.log(x); // -1

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- let x;
//        -- x = arr.slice(1, 3); // خروجی گرفتن از خود مقدار اول ( مقدار اول "ایندکس" مد نظر ) تا مقدار دوم ( مقدار دوم بیانگر این است که تا مقدار دوم که مشخص کردیم مقدار از ابتدا آرایه به جلو برود و تا آنجا را بخواند )
//        -- console.log(x); // 2 , 3

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- let x;
//        -- x = arr.splice(1, 4); // خروجی گرفتن از خود مقدار اول ( مقدار اول "ایندکس" مد نظر ) تا مقدار دوم ( مقدار دوم بیانگر این است که از خود "ایندکس" که مشخص کردیم تا مقدار دومی که دادیم در آرایه به جلو برود و تا آنجا را بخواند )
//        -- console.log(x); // 2 , 3 , 4 , 5

//        -----------------

//        -- const arr = [1, 2, 3, 4, 5]; // تعریف آرایه

//        -- let x;
//        -- x = arr.splice(1,4).reverse().toString().charAt(0); // خروجی گرفتن از ایندکس 1 تا 4 مقدار از خود ایندکس به جلو - برعکس کردن آن - تبدیل به استرینگ کردن آن - خروجی گرفتن از ایندکس 0
//        -- console.log(x); //

// Part 19 -------------------------------------------------------

//Object ( Method & Property )

// const user = { // تعریف آبجکت تو در تو
//   address: {
//     city: {
//       id: 1,
//       name: "name",
//     },
//   },
//   name: "ali",
//   age: 25,
// };
// let x;
// x = Object.keys(user); // "خروجی گرفتن "کی" های آبجکت "یوزر
// console.log(x); // (3) ['address', 'name', 'age']

// x = Object.keys(user.address); // "خروجی گرفتن "کی" های آبجکت "یوزر
// console.log(x); // ['city']

// x = Object.keys(user.address.city); // "خروجی گرفتن "کی" های آبجکت "یوزر
// console.log(x); // (2) ['id', 'name']

// x = Object.keys(user).length; // "خروجی گرفتن طول "کی" های ابجکت "یوزر  ( با اینکار میتوانیم تعداد "کی" های موجود را در بیاریم )
// console.log(x); // 3

// x = Object.values(user); // "خروجی گرفتن "ولیو" های آبجکت "یوزر
// console.log(x); // (3) [{…}, 'ali', 25]

// x = Object.entries(user); // خروجی گرفتن "کی" و "ولیو" های آبجکت "یوزر" به طور همزمان
// console.log(x); // (3) [Array(2), Array(2), Array(2)]

// x = Object.hasOwnProperty("name"); // بررسی وجود "کی" در آبجکت
// console.log(x); // true

// x = Object.hasOwn(user,"name"); // بررسی وجود "کی" در آبجکت
// console.log(x); // true

// Part 20 -------------------------------------------------------

// nameing in object

// const firstName = "ali";
// const lastNeme = "sheikh";
// const age = 25;

// const user = {
//   firstName: firstName,
//   lastNeme: lastNeme,
//   age: age,
// };
// console.log(user);

// const user2 = {
// در آبجکت اگر اسم متغیر فرا خوانده شده با "کی" یکی بود نیازی نیست که به آن "ولیو" اختصاص دهیم و جاوااسکریپت خودکار نشخیص میدهد
//   firstName,
//   lastNeme,
//   age,
// };
// console.log(user2);

//----------------------------------------

// destructuring in onject

// const todo = {
//   id: 1,
//   title: "todo1",
//   user: {
//     name: "ali",
//   },
// };
//
// const id = todo.id; // خارج کردن مقداری از آبجکت
// console.log(id); // 1

// const { id } = todo; // مقدار "آی دی" رو از "تودو" خارج میکنه و بعد در متغیری با همان نام ذخیره میکند
// console.log(id); // 1

// const { title } = todo; // مقدار "تایتل" رو از "تودو" خارج میکنه و بعد در متغیری با همان نام ذخیره میکند
// console.log(title); // todo1

// const { id, title, user } = todo; // مقدار "آی دی و تایتا و یوزر" رو از "تودو" خارج میکنه و بعد در متغیر هایی با همان نام ها ذخیره میکند
// console.log(id, title, user); // 1 'todo1' {name: 'ali'}
// console.log(id, title, user.name); // 1 'todo1' 'ali'

// const { id, title, user:{name} } = todo; // مقدار "آی دی و تایتا و مقدار یوزر" رو از "تودو" خارج میکنه و بعد در متغیر هایی با همان نام ها ذخیره میکند , در اینجا مقدار "نیم" را در متغیر "نیم" ذخیره میکند
// console.log(id, title, name); //1 'todo1' 'ali'

// const { id: todoID } = todo; // اینجوری میتونیم نام متغیری که قرار است مقدار در آن ذخیره بشه رو عوض کنیم و در این خط مقدار " آی دی" در متغیر "تودو آی دی" ذخیره میشود
// console.log(todoID);

//----------------------------------------

// destructuring in array

// const numbers = [10, 20, 30, 40, 50];
// console.log(numbers); // (5) [10, 20, 30, 40, 50]

// const [first, secend] = numbers; // در این روش از ایندکس 0 شورع میکند و در متغیر هایی که گفتین مقدار ها را ذخیره میکند
// console.log(first, secend); // 10 20

// const [first, secend, ...other] = numbers; // میتوانیم به بقیه ایندکس ها نیز دسترسی داشته باشیم ( rest operator ) با 3 نقطه
// console.log(first, secend, ...other); // 10 20 30 40 50

// Part 21 -------------------------------------------------------

// JSON

// JSON = JavaScript Object Notation ( نماد گزاری اشیا در جاوااسکریپت )

// وقتی درخواستی به سرور میفرستیم جواب را در قالب یک فایل "جی سان" به ما میدهد
// بصورت "جی سان" ارسال میکنیم و بصورت "جی سان" حویل میگیریم
// یک قالب استاندارد و سبک برای ذخیره و انتقال داده ها میباشد JSON

// قالب کلی شبیه یه آرایه میباشد اما با 2 فرق اصلی
// 1. کی" ها باد در "دابل کوتیشن "باشند"
// 2. ولیو" های "استرینگ" باید در "دابل کوتیشن "باشند"

// JSON نمونه از قالب

// [
//     {
//         "id" : 1,
//         "title" : "delectus aut autem",
//         "completed" : false,
//     },
//     {
//         "id" : 2,
//         "title" : "quis ut man facilis et officia qui",
//         "completed" : false,
//     },
// ]

// --------------------------------------

// JSON in JavaScript

// const post = {
//   id: 1,
//   title: "Title 1",
//   body: "Body 1",
// };
// console.log(post); // {id: 1, title: 'Title 1', body: 'Body 1'}

// Convert Object to JSON

// const str = JSON.stringify(post); // Convert Object to JSON
// console.log(str); // {"id":1,"title":"Title 1","body":"Body 1"}

// -------------------

// Convert Objects in Array to JSON

// const posts = [
//   {
//     id: 1,
//     title: "Title 1",
//     body: "Body 1",
//   },
//   {
//     id: 2,
//     title: "Title 2",
//     body: "Body 2",
//   },
// ];

// console.log(posts); // (2) [{…}, {…}]

// const str = JSON.stringify(posts); // Convert Object to JSON
// console.log(str); // [{"id":1,"title":"Title 1","body":"Body 1"},{"id":2,"title":"Title 2","body":"Body 2"}

// ---------------------------

// Convert JSON to Object

// const posts = [
//   {
//     id: 1,
//     title: "Title 1",
//     body: "Body 1",
//   },
//   {
//     id: 2,
//     title: "Title 2",
//     body: "Body 2",
//   },
// ];

// console.log(posts); // (2) [{…}, {…}]

// const str = JSON.stringify(posts); // Convert Object to JSON
// console.log(str);

// const obj = JSON.parse(str); // Convert JSON to Object
// console.log(obj); // (2) [{…}, {…}]

// Part 22 -------------------------------------------------------

// Function

// تابع یا "فاتکشن" مجموعه ای ورودی هستند که آنها را به عنوان "پارامتر" دریافت میکند و روی آن یک سری کار ها انجام میدهد و خروجی میدهد

// هر جا و به هر تعداد که خواستیم میتوانیم "فانکشنی" که تعریف کردیم را فرا بخوانیم

// function sayHelloW() {
//   console.log("hello word");
// }

// sayHelloW(); // صدا زدن تابع , Culling Function , invoke ( اجرا شده )

//--------------------------

// function add(x, y) {
//   // تعریف تابع همراه با پارامتر
//   // موقع تعریف کردن تابع مقدایر ورودی را پارامتر مینامیم
//   console.log(x + y);
// }
// add(5, 9); // "اینوک" کردن تابع همراه با آرگومان
// // موقع "اینوک" کردن تابع مقدایر ورودی را آرگومان مینامیم

//--------------------------

// function add(x, y, z) {
//   console.log(x + y + z);
// }
// add(5, 9, 10); // 24

//--------------------------

// function add(x, y, z) {
//   return x + y + z; // نتیجه را برگردان
// }
// const result = add(5, 9, 10); // بعد از استفاده از "پارامتر" ها برای "ریترن" جواب را متغیری به نام "ریزالت" ذخیره کن
// console.log(result); // 24

//--------------------------

// function add(x, y, z) {
//   return x + y + z;
//   console.log("result"); // در تابع ها کدی بعد از "ریرترن" باشد اجرا نخواهد شد
// }

//--------------------------

// function add(x, y, z) {
//   return x + y + z;
// }
// const result = add(5, 9); // بعد از استفاده از "پارامتر" ها برای "ریترن" جواب را متغیری به نام "ریزالت" ذخیره کن
// console.log(result); // Nan ( Not a Number ) چون "آرگومانی" برای "پارامتر" "ضد" نذاشتیم "آندیفایند" حساب میشه و نمیشه که با عدد جمعش کرد

//--------------------------

// function add(x, y, z = 9) {
//   //  اینگونه میتوانیم مقداری پیشفرض برای "پارامتر" تعریف کنیم تا در صورت نبود "آرگمانی" برای "پارامتر" مقدار پیشفرض داشته باشد
//   return x + y + z;
// }
// const result = add(5, 9); // چون در بالا به پارامتر ضد پارامتر دادیم اگر اینجا آرگومانیم اختصاص ندهیم همان را در نظر میگیرد
// console.log(result); //
// const result = add(5, 9, 10); // اما اگر آرگومانی برای پارامتر در نشز بگیریم مقدار پیشفرض را نادیده میگیرد
// console.log(result); //

//--------------------------

// function sum(...numbers) {
//   // اگر تعداد "آرگومان" ها را جهت تعریف "پارامتر" ندونیم میتوانیم با "... رست اپریتور" استفاده کنیم
//   return numbers;
// }

// const result = sum(5, 2, 3, 1, 7, 8);
// console.log(result);

// console.log(sum(5, 2, 3, 1, 7, 8)); // به جای روش بالا میتوانیم مستقیم از نتیجه خروجی بگیریم

// Part 23 -------------------------------------------------------

// Scope & Golbal

// Global ( یعنی اون "آبجکت" بصورت عمومی در تمامی پروژه من قابل استفاده است )
//
// console.log(window.innerWidth); // عرض صفحه مرورگر را بر میگرداند
// function run() {
//     console.log(window.innerWidth); // استفاده از "آبجکت ویندو" که یک "آبجکت گلوبال" است
//   }
//   run();

// وقتی مقداری را بصورت "گلوبال" تعریف میکنیم توی تابع و "بلاک" ها نیز به آن دسترسی داشته باشیم
// متغیر بصورت گلوبال تعریف شده و در تابع , "بلاک" و خارح از آنها قابل استفاده است
// "بلاک" ( if )
// const x = 10;
// console.log(x, "in global");
//
// function run() {
//  console.log(x, "in block");
// }
// run();

// اما اگر متغیری در "فانکشن" تعریف کنیم میتوان در خارج از آن "فانکشن" به آن دسترسی داشته باشیم
// متغیر فقط در "اسکوپ" یا فضای خود "فانکشن" قابل استفاده است
// function run() {
//     const y = 20; // متغیر "وای" فقط در محدوده "فانکشن" قابل استفاده است
//     console.log(y);
//   }
//   run(); // 20
//   console.log(y); // y is not defined

// const x = 10;
// console.log(x, "in global");
// function run() {
//   const x = 5; // در اینجا مقدار "ایکس" را "اوررایت" میکند
//   const y = 20;
//   console.log(y);
//   console.log(y + x); // 25 // در اینجا از متغیر ایجاد شده درون "فانکشن" استفاده میکند
// }
// run();

// if (true) {
//   const z = 30; // این متغیر فقط در خود شرط قابل استفاده است // فقط در فضای شرط قابل استفاده است
//   console.log(z, "in block");
// }
// console.log(z, "in block"); // تعریف نشده است

// const z = 12;
// console.log(z);
// if (true) {
//   const z = 30;
//   console.log(z); // در اینجا مقدار "ضد" را "اوررایت" میکند
// }

// function sum() {
//   let x = 100;
//   const y = 200;
//   var z = 300;
//   console.log(x, y, z);
// }
// sum();
// console.log(x); // x is not defined
// console.log(y); // y is not defined
// console.log(z); // z is not defined

// if (true) {
//   let x = 100;
//   const y = 200;
//   var z = 300;
//   console.log(x, y, z);
// }
// console.log(x); // x is not defined
// console.log(y); // y is not defined
// console.log(z); // 300 // ور" که در بلاک یک شرط تعریف شده است استثنا در گلوبال نیز در دسترس خواهد بود"
// چون که "ور" در "آبجکت ویندو" ذخیره میشود و خود "آبجکت ویندو "یک "آبجکت گلوبال" است

// function first() {
//   const x = 100;
//   function secend() {
//     // فانکشن" داخل "فانکشن" فرزند "فانکشن" بالایی است"
//     const y = 200;
//     console.log(x + y); // 300 // توی فرزند به متغیر های موجود در فصای فانکشن پدر دسترسی داریم
//     // اما درون فانکشن پدر به متغیر درون فرزند نمیتونیم دسترسی داشته باشیم
//   }
//   secend();
// }
// first();

// ------------------- توضیح کوتاه

// متغیر تعریف شده در "گلوبال" به صورت "گلوبال" قابل استفاده است

// let Global1 = "Global1";
// const Global2 = "Global2";
// var Global3 = "Global3";

// -------------------

// متغیر تعریف شده در "فانکشن" فقط در خود "فانکشن" قابل استفاده است

// function scope() {
//   const scope = scope;
// }
// console.log(scope); // scope is not defined

// متغیر تعریف در "فانکشن" والد در "فانکشن" فرزند نیز قابل استفاده است

// function scope() {
//   const scope1 = 1;
//   function scopeChild() {
//     const scope2 = 2;
//     console.log(scope1 + scope2); // 3
//   }
//   scopeChild();
// }
// scope();

// -------------------

// متغیر تعریف شده در "بلاک" فقط در خود "بلاک" قابل استفاده است

// if (true) {
//   let scope = 100;
//   console.log(scope);
// }
// console.log(scope);

// اما متغیر تعریف شده با "ور" خارح از "بلاک" نیز قابل استفاده است
// چون "ور" متغیر در "بلاک ایف" را در "آبجکت ویندو" ذخیره میکند و خود "آبجکت ویندو" یک "آبجکت گلوبال" میباشد بنابراین متغیر در اصل به صورت "گلوبال" تعریف میشود

// if (true) {
//   let x = 100;
//   const y = 200;
//   var z = 300;
//   console.log(x, y, z);
// }
// console.log(x); // x is not defined
// console.log(y); // y is not defined
// console.log(z); // 300

// -------------------

// اگر متغیری به صورت "گلوبال" تعریف شده باشد و سپس در "اسکوپ" خاصی نیز تعریف بشود متغیر تعریف شده در "اسکوپ" اولیت دارد

// const z = 12;
// console.log(z);
// if (true) {
//   const z = 30;
//   console.log(z); // 30 // در اینجا مقدار "ضد" را "اوررایت" میکند
// }

// -------------------

// Part 24 -------------------------------------------------------

// Function Declaration & Expression

// Declaration Function  // وقتی تابعی اینگونه تعریف میشود جاوااسکریپت آنها را در ابتدا فایل "لود" میکند یعنی اگر "لاگ" ما قبل از تعریف تابع انجام دهیم نیز نتیجه یکی خواهد بود

// console.log(add(3, 3)); // 6

// function add(x, y) {
//   return x + y;
// }
// console.log(add(3, 3)); // 6

// ----------

// Expression Function  // وقتی یک تابع را به یک متغیر اختصاص میدهیم جااسکریپت مانند "دکوریشن" آنها را در ابتدا قایل "لود" نمیکند و تا زمانی که متغیر "لود" نشود تابع نیز "لود" نخواهد شد

// console.log(add2(3, 4)); // هنوز تعریف نشده است add2

// const add2 = function (x, y) {
//   return x + y;
// };

// console.log(add2(3, 4)); // 7

// Part 25 -------------------------------------------------------

// Arrow Function ( Only for Expression Function )

// function add(x, y) {
//   return x + y;
// }

// console.log(add(5, 6)); // 11

// ----------

// const add = (x, y) => {
// در تابع های "اکسپرشن" میتوانیم بجای میتوانیم از نوشتن کلمه "فانکشن" خودداری کنیم و از "ارو فانکشن" استفاده کنیم
// return x + y;
// };
// console.log(add(2,3)); // 5

// ----------

// const subtract = (x, y) => x - y; // وقتی فقط یک خط کد درون تابع قرار میگیرد و آن خط هم "ریترن" میباشد میتوانیم از نوشتن "ریترن" نیز خودداری کنیم
// console.log(subtract(3, 2)); // 1

// ----------

// const double = x => x * 2; // وقتی فقط یک پارامتر موقع تعریف تابع وجود دارد میتوان از پرانتز نیز صرف نظر کرد
// console.log(double(2));

// ----------

// const createObj = () => { // "تابعی دارای "آبجکت
//   return {
//       name: 'ali',
//       age: 25
//   }
// }
// console.log(createObj()); // {name: 'ali', age: 25}

// ----------

// const createObj = () => ( // وقتی درون تابع فقط "آبجکت" وجود دارد میتوان به جای "براکت" از پرانتز استفاده کنیم
//   {
//       name: 'ali',
//       age: 25
//   }
// );

// console.log(createObj()); // {name: 'ali', age: 25}

// Part 26 -------------------------------------------------------

// Immediately Invoked Function Expression ( IIFE ) ( "فراخوانی بلافاصله تابع "اکسپرشن )
// با گذاشتن کل تابع در پرانتز و پرانتز بعد از بسته شدن تابع آن تابع در ابتدا فایل خوانده و بلافاصله اجرا میشود

// ( function (name) {
//   const lastName = "mohamadi";
//   const hello = () => console.log(`my name is ${name} & my last name is ${lastName}`);

//   hello();
// } ) ("ali");

// Part 27 -------------------------------------------------------

// If & Else ( بررسی بر قرار بودن شرط مد نظر )

// if (true) {
//   console.log("Bruh"); // Bruh
// }
// if (false) {
//   console.log("Bruh"); // nothing
// }

// -----

// const y = 10;
// const z = 5;

// if (y > z) {
//   console.log(`${y} > ${z}`); // 10 > 5
// }

// -----

// const y = 10;
// const z = 10;

// if (y == z) {
//   console.log(`${y} == ${z}`); 10 == 10
// }

// -----

// const y = 10;
// const z = "10";

// if (y === z) {
//   console.log(`${y} === ${z}`); // nothing
// }

// -----

// const y = 10;
// const z = 11;

// if (y > z) {
//   console.log(`${y} > ${z}`); // nothing
// } else {
//   console.log("Else"); // Else
// }

// -----

// const y = 10;
// const z = 10;

// if (y === z) {
//   console.log(`${y} == ${z}`); // nothing
// } else {
//   console.log("Else"); // Else
// }

// Part 28  -------------------------------------------------------

// Else If

// wiht propmt
// const y = Number(prompt("Enter a number"));
// const z = Number(prompt("Enter another number"));

// with sample vaiable
// const y = 10;
// const z = 5;

// if (y == z) { // اگر این شرط بر قرار بود
//   console.log(`${y} = ${z}`);
// }
//
// else if (y > z) { // در غیر این صورت اگر این شرط بر قرار بود
//   console.log(`${y} > ${z}`);
// }
//
// else if (y < z) { // در غیر این صورت اگر این شرط بر قرار بود
//   console.log(`${y} < ${z}`);
// }
//
// else {
//   console.log("Else");
// }

// Part 29  -------------------------------------------------------

// Switch

// with prompt
// const x = Number(prompt("enter a number"));

// with sample variable
// const x = 20;

// switch (x) { // سوییچ" مناسب بررسی یک متغیر میباشد"
//   case 10: // کیس" مثل "ایف" عمل میکند و میتواند هر شرطی اینجا قرار بگیرد"
//     console.log("x is 10");
//     break; // از "بریک" استفاده میشه تا از این "کیس" خارح بشه

//   case 15:
//     console.log("x is 15");
//     break;

//   case 20:
//     console.log("x is 20");
//     break;

//   case 25:
//     console.log("x is 25");
//     break;

//   default:  // دیفالت" مثل "الز" عمل میکند"
//     console.log(`x is ${x}`);
//     break;
// }

// Part 30  -------------------------------------------------------

// Truthy & Falsy Values

// Falsy values

// - false
// - 0
// - '' or ""
// - null
// - undefined
// - NaN

// const x = false;

// if (x) {
//   console.log("Truthy"); // do nothing
// } else {
//   console.log("Falsy"); // Falsy
// }

// ---------

// const x = 0;
// console.log(Boolean(x)); // false
// if (x) {} // false

// ---------

// const x = '';
// console.log(Boolean(x)); // false
// if (x) {} // false

// ---------

// const x = "";
// console.log(Boolean(x)); // false
// if (x) {} // false

// ---------

// const x = null;
// console.log(Boolean(x)); // false
// if (x) {} // false

// ---------

// const x = undefined;
// console.log(Boolean(x)); // false
// if (x) {} // false

// ---------

// const x = NaN;
// console.log(Boolean(x)); // false
// if (x) {} // false

// -------------------------

// Truthy values

// - Everything else that is not falsy
// - "Ali" ( string )
// - ' ' (space in a string)
// - 'false' (false in a string)
// - '0' (0 in a string)
// - 25 ( Integer Except 0 )
// - true
// - [] (empty array)
// - {} (empty object)
// - function () {} (empty function)

// const x = "Alireza"; // String
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = ' '; // Space in String
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = " "; // Space in String
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = "false"; // False in String
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = "0"; // 0 in a string
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = 25; // Integer in String
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = true; // True
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// ---------

// const x = []; // Empty Array
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// const posts = ["post1", "post2"];
// console.log(Boolean(posts)); // true

// const posts = [];
// console.log(Boolean(posts)); // true

// if (posts) {
//   console.log("List Posts"); // list Posts
// } else {
//   console.log("No Post"); // do nothing
// }

// if (posts.length > 0) { // تشخیص خالی بودن آرایه
//   console.log("List Posts"); // do nothing
// } else {
//   console.log("No Post"); // No Post
// }

// ---------

// const x = {}; // Empty Object
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// const user = { name: "ali" };
// console.log(Boolean(user)); // true

// const user = {};
// console.log(Boolean(user)); // true

// if (user) {
//   console.log("User"); // User
// } else {
//   console.log("No User"); // do nothing
// }

// if (Object.keys(user).length > 0) { // "تشخیص خالی بودن "آبجکت
//   console.log("User"); // do nothing
// } else {
//   console.log("No User"); // No User
// }

// ---------

// const x = {}; // Empty Function
// console.log(Boolean(x)); // true

// if (x) {
// } // true

// Part 31  -------------------------------------------------------

// Logical Operator ( عملگر منطقی )

//  && , || , !

// && ( اگر یکی از شرط ها "فالس" بود کل شرط "فالس" خواهد بود ) ( و And )

// console.log(20 > 10 && 30 > 20 && 40 > 50);

// if (20 > 10 && 30 > 20 && 40 < 50) {
//   console.log("True");
// } else {
//   console.log("Flase");
// }

// ------

// || ( اگر یکی از شرط ها "ترو" بود کل شرط "ترو" خواهد بود ) ( یا Or )

// console.log(20 > 10 || 10 > 20);

// if (5 > 10 || 10 > 20 || 40 < 40) {
//   console.log("True");
// } else {
//   console.log("Flase");
// }

// ------

// ! ( "معکوس کردن مقدار "ترو" یا "فالس )
// let a = true;
// console.log(a);
// console.log(!a);

// if (!a) {
//   console.log("True");
// } else {
//   console.log("Flase");
// }

// ------

// && - will return the first falsy value or the last value

// let a;

// a = 10 && 20 && 50; //  مقداری که "فالس" میباشد را برمیگرداند اگر نبود آخرین مقدار را برمیگرداند
// console.log(a); // 50

// a = 10 && false && 50; // مقداری که "فالس" میباشد را برمیگرداند اگر نبود آخرین مقدار را برمیگرداند
// console.log(a); // false

// a = 10 > 50 && 50; // مقداری که "فالس" میباشد را برمیگرداند اگر نبود آخرین مقدار را برمیگرداند
// console.log(a); // false

// a = '' && 50; // مقداری که "فالس" میباشد را برمیگرداند اگر نبود آخرین مقدار را برمیگرداند
// console.log(a); //

// a = null && 50; // مقداری که "فالس" میباشد را برمیگرداند اگر نبود آخرین مقدار را برمیگرداند
// console.log(a); // null ( چون مقدار "نال" "فالس" میباشد )

// const posts = ["post1", "post2"];
// const posts = [];
// posts.length > 0 && console.log(posts[0]);
// // بررسی میکند اگر طول آرایه بیشتر از 0 بود "ایندکس" 0 رو برمیگرداند

// -----

// let b;

// b = 10 || 20; // مقداری که "ترو" میباشد را برمیگرداند اگر نبود آخرین مقدار را برمیگرداند
// b = 0 || 20;
// b = 0 || 20 || null || undefined
// console.log(b);

// -----

// ?? - will return the right side operand when the left is null or undefined ( اگر مقدار سمت چپ "نال" یا "آندیفایند" بود سمت راست را برگردان در غیر اینصورت همان مقدار اولی را برمیگرداند)

// let c;

// c = 10 ?? 20;
// console.log(c); // 10

// c = null ?? 20;
// console.log(c); // 20

// c = undefined ?? 20;
// console.log(c); // 20

// c = 0 ?? 20;
// console.log(c); // 20

// c = "" ?? 20;
// console.log(c); //

// Part 32  -------------------------------------------------------

// ||= assigns the right side value only if the left is a falsy value

// let a = null;

// if (!a) {
//   a = 10;
// }
// console.log(a); // 10

// a = a || 10; // مقدار "ترو" رو به متغیر اختصاص میدهد اگر نبود آخرین مقدار را اختصاص میدهد
// console.log(a); // 10

// a ||= 10; // اگر مقدار سمت چپ "فالس" بود مقدار سمت راست را به متعیر اختصاص بده
// console.log(a); // 10

// ------

// &&= assigns the right side value only if the left is a truthy value

// let a = 5;

// if (a) {
//   a = 10;
// }
// console.log(a); // 10

// a = a && 10; // مقدار "فالس" رو به متغیر اختصاص میدهد اگر نبود آخرین مقدار را اختصاص میدهد
// console.log(a); // 10

// a &&= 10; // اگر مقدار سمت چپ "ترو" بود مقدار سمت راست را به متعیر اختصاص بده
// console.log(a); // 10

// ------

// ??= assigns the right side value only if the left is null or undefined

// let a = null;

// if (a === null || a === undefined) {
//   a = 10;
// }
// console.log(a);

// a = a ?? 10; // اگر مقدار سمت چپ "نال" یا "آندیفایند" بود مقدار سمت راست را به متغیر اختصاص بده
// console.log(a);

// a ??= 10; // اگر مقدار سمت چپ "نال" یا "آندیفایند" بود مقدار سمت راست را به متغیر اختصاص بده
// console.log(a);

// Part 33  -------------------------------------------------------

// Teraney Operator

// with propmpt
// const age = Number(prompt("Enter your age"));

// with sample variable
// const age = 19;

// if (age >= 18) {
//   console.log("You Can Vote");
// } else {
//   console.log("You Can Not Vote");
// }

// age >= 18 ? console.log("You Can Vote") : console.log("You Can Not Vote"); // "علامت سوال به جای "ایف" و دو نطقه به جای "الس

// age >= 18
//   ? (alert("You Can Vote"), console.log("You Can Vote")) // با گذاشتن داخت پرانتز و جدا کردن با ویرگول میتوانیم چند کار را نیز انجام دهیم
//   : (alert("You Can Not Vote"), console.log("You Can Not Vote"));

// Part 34  -------------------------------------------------------

// for

// for (let i = 0; i <= 10; i++) {
//   اول متغیر تغریف میشود ; سپس شرط تعریف میشود ; سپس میگویم بعد از انجام شرط چه اتفاقی رخ دهد ( که ++ یک واحد به متغیر اصافه میکند )
//     if (i === 7) {
//       console.log("7");
//     }
//   console.log(`Number is ${i}`);
// }

// -------

// for (let i = 0; i <= 10; i++) {
//   console.log(`Number is ${i}`);
//   for (let j = 0; j <= 20; j++) { // حلقه "فور" درون حلقه "فور" ( بعد از اتمام این حلقه به اتفاقی که بعد از تمام شدن حلقه بالایی است می پردازد سپس دوباره حلقه بالایی را اجرا و دوباره به این حلقه میرسد و اجرا میشود )
//     console.log(`Number is ${i} - ${j}`);
//   }
// }

// -------

// for (let i = 0; i <= 10; i++) {
//   if (i === 5) {
//     console.log("Breaking....");
//     break; // با "بریک" میتوان کلا از حلقه به بیرون آمد
//   }
//   console.log(`Number is ${i}`);
// }

// -------

// for (let i = 0; i <= 10; i++) {
//   if (i === 5) {
//     console.log("Skipping....");
//     continue; // با "کانتینیو" شرط مد نظر رو رد میکند و حلقه را ادامه میدهد
//   }
//   console.log(`Number is ${i}`);
// }

// Part 35  -------------------------------------------------------

// while & do while

// let i = 0; // متغیر قبل از حلقه تعریف میشود

// while (i <= 10) { // مانند فور عمل میکند اما نوع نوشتار متفاوت است
//   console.log(`Number is ${i}`);
//   i++; //  شرط نیز درون "بلاک" حلقه نوشته میشود
// }
// can use break & continue in while

// -------

// let i = 11;
// do { // فرق در این است که چون بعد از "دو" از "وایل" رو استفاده میشود در صورت بر قرار نبودن شرط نیز حداقل یکبار کد درون "دو" اجرا خواهد شد
//   console.log(`Number is ${i}`);
//   i++;
// } while (i <= 10);
// can use break & continue in do while

// Part 36  & 37-------------------------------------------------------

// for of & for in

// For In کلیدها را به شما می‌دهد ( بیشتر برای آبجکت استفاده میشود )

// For In ( Array )
// const array = ['a', 'b', 'c'];
// for (let key in array) {
// console.log(key); // 0, 1, 2
// console.log(array[key]); // a, b, c
// }

// For In ( Object )
// const object = {
//     name: 'علی',
//     age: 30,
//     city: 'تهران'
//   };

// for (let key in object) {
//   console.log(key); // 'name', 'age', 'city'
//   console.log(object[key]); // 'علی', 30, 'تهران'
// }

// ----

// For Of مقادیر را به شما می‌دهد ( بیشتر برای آرایه و استرینگ استفاده میشود )

// For Of ( Array )
// const array = ['a', 'b', 'c'];
// for (let value of array) {
// console.log(value); // 'a', 'b', 'c'
//}

// For Of ( Object )
// const object = {
//     name: 'علی',
//     age: 30,
//     city: 'تهران'
//   };

// (قابل استفاده نیست)
//   for (let value of object) {
//     console.log(value); // TypeError: object is not iterable
//   }

// -----------------

// For In

// const items = ["ali", "nima", "liam", "sara"];

// for (let i = 0; i < items.length; i++) { // اینگونه میتوانیم با حلقه "فور" محتویات درون آرایه را بدست بیاریم
//   console.log(items[i]);
// }

// --------

// const items = ["ali", "nima", "liam", "sara"];

// for (const item of items) { // با "فور آف" مانند کد بالا میتوانیم به محتویات درون آرایه دسترسی داشته باشیم
//   console.log(item);
// }

// --------

// const users = [{ name: "ali" }, { name: "nima" }, { name: "sara" }]; // "آرایه ای از "آبجکت

// for (const user of users) { // این حالت فقط بر روی آرایه و "استرینگ" قابل اجرا است
//   console.log(user); // با "فور آف" مانند کد بالا میتوانیم به محتویات درون آرایه دسترسی داشته باشیم که در اینجا "آبجکت" میباشند
//   console.log(user.name); // با "فور آف" مانند کد بالا میتوانیم به محتویات درون آرایه دسترسی داشته باشیم که در اینجا "نیم" های موجود "آبجکت" میباشند
// }

// --------

// const str = "webprog";

// for (const letter of str){  // با "فور آف" مانند کد بالا میتوانیم به محتویات درون "استرینگ" دسترسی داشته باشیم که در اینجا حروف های "استرینگ" میباشند
//   console.log(letter);
// }

// For Of

// const colorObj = {
//   color1: "blue",
//   color2: "red",
//   color3: "yellow",
//   color4: "green",
// };

// for (const key in colorObj) { // فور این" همان"فور آف" است اما برای "آبجکت" ها و آرایه ها کار میکند
// console.log(key); // کی" های "آبجکت" را برمیگرداند"
// console.log(colorObj[key]); //مقدار های "کی" های "آبجکت" را برمیگرداند
// console.log(key, colorObj[key]); // کی" های "آبجکت" همراه با مقدار های آنها برمیگرداند"
// }

// -------

// const colorArr = ["red", "blue", "yellow"];
// for (const index in colorArr){
// console.log(index); // ایندکس" های آرایه را برمیگرداند"
// console.log(colorArr[index]);//مقدار های "ایدنکس" های آرایه را برمیگرداند
// console.log(index, colorArr[index]); // مقدار های "ایدنکس" های آرایه و و "ایندکس" ها را برمیگرداند
// }

// Part 38  -------------------------------------------------------

// High Order Array Method

// forEach

// const numbers = [1, 2, 3, 4, 5];
// console.log(numbers);
// numbers.forEach(function (number) { // call back function
// دسترسی به مقدار های یک آرایه
// استفاده از "فانکشن" در تابه "فور ایچ" برای کاری که میخواهیم روی مقدار های آرایه انجام دهیم و آنها را در متغیر که در فانکشن گزاشتیم میریزد
//   console.log(number);
// });

// ------------

// const numbers = [1, 2, 3, 4, 5];
// numbers.forEach((number) => console.log(number)); // "استفاده از "ارو فانکشن

// ------------

// const numbers = [1, 2, 3, 4, 5];
// numbers.forEach(function (number,index,arr) {// مقدار اول: محتویات آرایه , مقدار دوم: اندیس های ارایه , مقدار سوم: کل آرایه
//   console.log(number,index,arr);
// });

// ------------

// const numbers = [1, 2, 3, 4, 5];
// numbers.forEach((number, index, arr) => console.log(number, index, arr)); // "استفاده از "ارو فانکشن

// ------------

// const numbers = [1, 2, 3, 4, 5];

// function numberLog(number) {
//   console.log(number);
// }

// numbers.forEach(numberLog); // در اینجا خود جاوا اسکریپت تابع را اجرا میکند و نیازی به پرانتز نیست

// ------------

// const arrObjt = [{ name: "ali" }, { name: "liam" }, { name: "sara" }];
// arrObjt.forEach((name) => console.log(name)); // برای "آبجکت" های درون آرایه نیز قابل اسفاده است
// arrObjt.forEach((name) => console.log(name.name)); // مقادیر "کی" ها را بر میگرداند

// Part 39  -------------------------------------------------------

// High Order Array Method

// Filter & Every

// filter

// const numbers = [1, 2, 3, 4, 5];

// const numberFilter = numbers.filter(function (number) {
// در "فیلتر" یک شرط با "ریتارن" تعریف میکند و مقادیری که در آرایه با این شرط وحود دارند را برمیگرداند
//   return number > 3;
// });
// console.log(numberFilter);

// -------

// const numbers = [1, 2, 3, 4, 5];
// const numberFilter = numbers.filter((number) => { // "با استفاده از "ارو فانکشن
//   return number > 3;
// });
// console.log(numberFilter);

// -------

// const numbers = [1, 2, 3, 4, 5];
// const numberFilter = numbers.filter((number) => number > 3); // "با استفاده از "ارو "فانکشن" بدون "ریتارن
// console.log(numberFilter);

// ---------------------

// every

// const numbers = [1, 2, 3, 4, 5];

// const numberEven = numbers.every(function (number) { // اوری" تمام مقادیر آرایه را بررسی میکند و اگر تمام مقادیر از شرط  "ترو" باشد "ترو" را برمیگرداند و اگر یکی "فالس" باشد "فالس" را بر میگرداند"
//   return number > 2;
// });
// console.log(numberEven);

// -------

// const numbers = [1, 2, 3, 4, 5];

// const numberEven = numbers.every((number) => {
//   return number > 2;
// });
// console.log(numberEven);

// -------

// const numbers = [1, 2, 3, 4, 5];

// const numberEven = numbers.every((number) => number > 2);
// console.log(numberEven);

// Part 40  -------------------------------------------------------

// map

// const numbers = [1, 2, 3, 4, 5, 6, 7];
// const status = numbers.map((number) => number) // همان کار "فور ایچ" را انجام میدهد اما نتیجه را بصورت آرایه برمیگداند
// console.log(status); // (7) [1, 2, 3, 4, 5, 6, 7]

// const numbers = [1, 2, 3, 4, 5, 6, 7];
// let status = [];
// numbers.forEach((number) => status.push(number * 2));
// console.log(status); // (7) [1, 2, 3, 4, 5, 6, 7]

// const users = [{ name: "ali" }, { name: "liam" }, { name: "sara" }];

// const ststus = users.map((user) => {
//   return { name: `fisrtName:${user.name}` }; // چون که قدار که رو آن "مپ" زدیم "آّجکت" هست "ریترن" را نیز "آبجکت" در نظر میگیریم
// });

// console.log(ststus);  //(3) [{…}, {…}, {…}]  , 0 : {name: 'fisrtName:ali'} , 1: {name: 'fisrtName:liam'} , 2: {name: 'fisrtName:sara'}

// Part 41  -------------------------------------------------------

//reduce

// const numbers = [1, 2, 3, 4, 5, 6, 7];

// const sum = numbers.reduce((previousValue, currentValue) => { // با "ریدوس" میتوانیم مقادیر یک آرایه را با هم جمع یا تفریق و ضرب و تقسیم کنیم  return previousValue + currentValue;
// return previousValue + currentValue;
// }, 0); // در اینجا یک آرگومان برای حالت پیشفرض مقدار "پریویس ولیو "میگزاریم تا خالی نباشد

// console.log(sum); // 28

// ------------

// cart total

// const cart = [
//   {
//     id: 1,
//     name: "product 1",
//     price: 100,
//   },
//   {
//     id: 2,
//     name: "product 2",
//     price: 200,
//   },
//   {
//     id: 3,
//     name: "product 3",
//     price: 300,
//   },
//   {
//     id: 4,
//     name: "product 3",
//     price: 700,
//   },
// ];

// const total = cart.reduce((preValue , product)=>{
//     return preValue + product.price;  // چون "ریدوس" مقدار را از آرایه خارج کرده است میتوان به "کی" های "آبجکت" ها داخل دسترسی داشته باشیم
// },0)
// console.log(total); // 1300

// without return
// const total = cart.reduce((preValue, product) => preValue + product.price, 0);
// console.log(total); // 1300

// Part 42  -------------------------------------------------------

// DOM ( Document Object Model )

// console.log(window.document); // "دسترسی به "داکیومنت

// console.log(document); چون "آبجک" "گلوبال" است نیازی به "ویندو" نیست

// console.log(document.body); // "دسترسی به تگ "بادی" "داکیومنت

// console.log(document.body.innerHTML); "دسترسی به محتویات "اچ تی ام ل "داکیومنت" بصورت "استرینگ

// document.body.innerHTML = "<h1> Bruh </h1>" // تگ های "اچ تی ام ال" را پاک کرده و "تگی" که دادیم را قرار میدهد اما در سورس اصلی تغییر ایجاد نمیشود

// Part 43  -------------------------------------------------------

// DOM Property

// document.all

// let output;
// output = document.all; // در قالب "اچ تی ام ال کالکشن" تمامی "تگ" ها موجود در "داکیومنت" را برمیگرداند
// console.log(output); // HTMLAllCollection(10) [html, head, meta, meta, title, style, body, h1, section.section, script, viewport: meta]

// let output;
// output = document.all[1];
// console.log(output); // head

// let output;
// output = document.all.length;
// console.log(output); // 10

// --------------------

// documentElement

// let output;
// output = document.documentElement; // همه المنت ها ( کل داکیومنت اچ تی ام ال ) را بر میگرداند
// console.log(output);
//
// let output;
// output = document.head; // کل المنت "هد" ( کل تگ هد اچ تی ام ال ) را بر میگرداند
// console.log(output);
//
// let output;
// output = document.body; // کل المنت "بادی" ( کل تگ بادی اچ تی ام ال ) را بر میگرداند
// console.log(output);
//
// let output;
// output = document.doctype; // کل المنت "داک تایپ" ( کل داک تایپ اچ تی ام ال ) را بر میگرداند
// console.log(output);

// --------------------

// documentElement.children & documentElement Class and ID

// Children
// let output;
// output = document.body.children; // کل فرزندان "بادی" ( کل تگ های فرزند بادی اچ تی ام ال ) را بر میگرداند
// console.log(output); // HTMLCollection(3) [h1, section.section, script]
//
// let output;
// output = document.body.children[0]; // فرزند اندیس 0  "بادی" ( فرزند اول تگ بادی اچ تی ام ال ) را بر میگرداند
// console.log(output); // h1
//
// ID
// let output;
// output = document.body.children[0].id // کل المنت "داک تایپ" ( کل داک تایپ اچ تی ام ال ) را بر میگرداند
// console.log(output); //h1ID
//
// Class
// let output;
// output = document.body.children[0].classList; // کل کلس های اندیس 0  "بادی" ( کل کلس های فرزند اول تگ بادی اچ تی ام ال ) را  بصورت یک ( دام تکن لیست ) بر میگرداند
// console.log(output); // DOMTokenList ['h1CLass', value: 'h1CLass']
//
//
// let output;
// output = document.body.children[0].classNamet; // کل کلس های اندیس 0  "بادی" ( کل کلس های فرزند اول تگ بادی اچ تی ام ال ) را بصورت یک ( استرینگ ) بر میگرداند
// console.log(output); // DOMTokenList ['new-class', value: 'new-class']
//
// let output;
// document.body.children[0].className = 'new-class'; // کلس  اندیس 0  "بادی" (  کلس فرزند اول تگ بادی اچ تی ام ال ) را بصورت یک ( دام تکن لیست ) بر تغییر میدهد
// output = document.body.children[0].classList; // کل کلس های اندیس 0  "بادی" ( کل کلس های فرزند اول تگ بادی اچ تی ام ال ) را بر میگرداند
// console.log(output); // DOMTokenList ['new-class', value: 'new-class']

// --------------------

// documentElement.links

// links
// let output;
// output = document.links; // کل المنت های دارای لینک "داکیومنت" ( کل المنت های لینک دار داکیومنت اچ تی ام ال ) را بر میگرداند
// console.log(output); // HTMLCollection(5) [a, a, a, a, a]
//
// links[]
// let output;
// output = document.links[0]; //المنت لینک دار اندیس 0 "داکیومنت" ( اولین المنت لینک دار داکیومنت اچ تی ام ال ) را بر میگرداند
// console.log(output); // a
//
// links[0].href
// let output;
// output = document.links[0].href; // لینک اندیس 0 "داکیومنت" ( اولین لینک داکیومنت اچ تی ام ال ) را بر میگرداند
// console.log(output); // google.com ( link )

// --------------------

// HTMLAllCollection to Array

// document.all to array
//
// let output;
// output = document.all;
// const arrOut = Array.from(output); // تبدیل "اچ تی ام ال کالکشن" به آرایه
// console.log(arrOut); // [html, head, meta, meta, title, style, body, h1, section.section, script]
//
// forEach
// const items = arrOut.forEach((item) => console.log(item)); // کل "المنت" هایی ( کل تگ هایی اچ تی ام ال که تبدیل به آرایه شدن ) را برمیگرداند
//
// Only Log
// const arrAll = Array.from(document.all);
// console.log(arrAll); // [html, head, meta, meta, title, style, body, h1, section.section, script]
//
// ------------
//
// document.links to array
//
// let output;
// output = document.links;
// const arrOut = Array.from(output); // تبدیل "اچ تی ام ال کالکشن" به آرایه
// console.log(arrOut); // (5) [a, a, a, a, a]
//
// forEach
// const links = arrOut.forEach((item) => console.log(item)); // کل "المنت" هایی ( کل تگ هایی اچ تی ام ال که تبدیل به آرایه شدن ) را برمیگرداند
//
// Only Log
// const arrAll = Array.from(document.all);
// console.log(arrAll); // [html, head, meta, meta, title, style, body, h1, section.section, script]

// Part 44  -------------------------------------------------------

// DOM Selector

// getElementById | getAttribute | setAttribute

// let output;

// output = document.getElementById("section"); // المنت دارای "آی دی" مد نظر را بر میگرداند
// console.log(output); // "کل المنت "سکشن

// output = document.getElementById("section").getAttribute("id"); // اتربیوت" مد نظر را بر میگرداند"
// console.log(output); // section

// output = document.getElementById("section").getAttribute("class"); // اتربیوت" مد نظر را بر میگرداند"
// console.log(output); // section

// document.getElementById("section").setAttribute("class", "new-class"); // اتربیوت" با مقدار جدید تعیین میکنیم"
// console.log(document.getElementById("section").getAttribute("class")); // new-class

// document.getElementById("section").setAttribute("title", "new-title"); // اتربیوت" با مقدار جدید تعیین میکنیم"
// console.log(document.getElementById("section").getAttribute("title")); // new-class

// ------------

// textContent | innerText | style

// const title = document.getElementById("master-card-paragraf");

// title.textContent = "Green Card"; // "دسترسی به "تکست
// console.log(title.textContent); // Green Card

// title.innerText = "Green Card"; // "دسترسی به "تکست
// console.log(title.textContent); // Green Card

// title.innerHTML = "<li> Green Card </li>";
// console.log(title.textContent); // Green Card

// title.innerHTML = "Green Card";
// console.log(title.textContent); // Green Card

// title.style.color="lime"; // "استایل دهی"
// title.style.backgroundColor="black";
// title.style.padding="10px"

// ------------

// Single Select | querySelector

// let output;

// output = document.querySelector("p"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector("main section"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector("#section"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector(".section"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector("input[type=text]"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector("ul:first-child"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector("ul:last-child"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// output = document.querySelector("ul:nth-child(2)"); // دسترسی به اولین "تگی" که برابر با مقدار مد نظر است
// console.log(output);

// const list = document.querySelector("ul");
// console.log(list.querySelector("li"));

// Part 45  -------------------------------------------------------

// Multi Select | querySelectorAll | getElementsByClassName | getElementsByTagName

// Multi Select | querySelectorAll

// const listItem = document.querySelectorAll("li"); // دسترسی به کل "تگ" های موجود با مقدار مد نظر ( بصورت نود لیست )
// console.log(listItem);

// console.log(listItem[0]); // "دسترسی به مقدار اول "نود لیست
// listItem[0].style.color = "white";

// listItem.forEach((item, index) => {
//   console.log(item);
//   item.style.color = "white";

//   if (index === 1) {
//     item.style.color = "gray";
//   }

//   if (index === 2) {
//     item.innerText = "test";
//   }
// });

// console.log(listItem[2]); // <li>test<li/>

// ------------

// const listItem2 = document.getElementsByClassName("li-class"); // دسترسی به کل "تگ" های موجود با "کلس" مد نظر ( بصورت اچ تی ام ال کالکشن )
// console.log(listItem2); // HTMLCollection(3) [li.li-class, li.li-class, li.li-class]

// const listItem2Arr = Array.from(listItem2);
// listItem2Arr.forEach((itme) => {
//   console.log(itme);
// });

// console.log(listItem2[0].innerText); // 1 ( "دسترسی به محتوای "تکست ایندکس 0 )

// const listItem3 = document.getElementsByTagName("li"); // دسترسی به کل "تگ" های موجود با "تگ" مد نظر ( بصورت اچ تی ام ال کالکشن )
// console.log(listItem3); // HTMLCollection(3) [li.li-class, li.li-class, li.li-class]

// const listItem3Arr = Array.from(listItem3);
// listItem3Arr.forEach((itme) => {
//   console.log(itme);
// });

// Part 46  -------------------------------------------------------

// createElement | createTextNode | appendChild

// const div = document.createElement("div"); // "ساخت یک "المنت" به شکل "نود
// console.log(div); //<div></div>

// div.id = "div-id"; // "اختصاص دادن "آی دی
// console.log(div); // <div id="div-id"></div>

// div.className = "div-clasee"; // "اختصاص دادن "کلس
// console.log(div); // <div id="div-id" class="div-clasee"></div>

// div.setAttribute("title", "div-title"); // "اختصاص دادن "اتربیوت
// console.log(div); // <div id="div-id" class="div-clasee" title="div-title"></div>

// div.innerText = "Bruh"; // برای آپدیت کردن مقدار "تکست" استفاده میشود
// console.log(div); // <div id="div-id" class="div-clasee" title="div-title"> Bruh </div>

// div.textContent = "Bruh"; // برای ایجاد کردن مقدار "تکست" استفاده میشود
// console.log(div); // <div id="div-id" class="div-clasee" title="div-title"> Bruh </div>

// const text = document.createTextNode("Bruh");
// div.appendChild(text); // "اضافه کردن مقداری به یه یک "المنت
// console.log(div); // <div id="div-id" class="div-clasee" title="div-title"> Bruh </div>

// document.body.appendChild(div); // "اضافه کردن "دیو" به "بادی
// document.querySelector("ul").appendChild(div); // "اضافه کردن "دیو" به "یو ال

// const div2 = "<div id='div-id' class='div-clasee' title='div-title'> Bruh </div>";
// document.querySelector("ul").appendChild(div2); // TypeError: Failed to execute 'appendChild' on 'Node': parameter 1 is not of type 'Node'. ( Error )

// document.querySelector("ul").innerHTML = div2; // جایگزین کردن مقدار مد نظر ( برای "پرفورمنس" زیاد خوب نیست )

// Part 47  -------------------------------------------------------

// replaceWith | outerHTML

// replaceWith

// function replaceFirstItem() {
//   const firstItem = document.querySelector("li:first-child");
//   const li = document.createElement("li");
//   li.textContent = "Replaced First";
//   firstItem.replaceWith(li);
// }
// replaceFirstItem();

// ----

// function replaceSecendItem() {
//   const firstItem = document.querySelector("li:nth-child(2)");
//   const li = document.createElement("li");
//   li.textContent = "Replaced Second";
//   firstItem.replaceWith(li);
// }
// replaceSecendItem();

// OR

// function replaceSecendItem() {
//   const firstItem = document.querySelector("li:nth-child(2)");
//   firstItem.outerHTML = "<li>Replaced Second</li>";
// }
// replaceSecendItem();

// ----

// outerHTML
// const outerHTML = document.querySelector("li:nth-child(2)").outerHTML; // کل "المنت" مد نظر را به شکل "استرینگ" برمیگرداند
// console.log(outerHTML); //<li>Replaced Second</li>

// const outerHTML = document.querySelector("li:nth-child(2)").outerHTML = "<li>Replaced Second2</li>"; // کل "المنت" مد نظر را به جایگزین المنت مد نظر میکند
// console.log(outerHTML); //<li>Replaced Second2</li>

// ----

// Reaplaced All

// function replaceAllItems(){
//   const list = document.querySelectorAll("li")
//   list.forEach(item => item.innerText = "Reaplaced All")
// }
// replaceAllItems()

// OR

// function replaceAllItems() {
//   const list = document.querySelectorAll("li");
//   list.forEach((item, index) => (item.innerText = `${index + 1} li Replaced`));
// }
// replaceAllItems();

// Part 48  -------------------------------------------------------

// remove | removeChild

// remove

// function removeInput() {
//   const input = document.querySelector("input");
//   input.remove(); // حذف کردن "المنت" مد نظر
// }
// removeInput();

// -------

// removeFirstChild

// function removeFirstChild() {
//   const ul = document.querySelector("ul");
//   const li = document.querySelector("li:first-child");
//   ul.removeChild(li); // حذف "المان چایلد" مد نظر
// }
// removeFirstChild();

// -------

// Dynamic removeChild

// function removeChild(number) {
//   const ul = document.querySelector("ul");
//   const li = document.querySelector(li:nth-child(${number}));
//   ul.removeChild(li); // حذف "المان چایلد" مد نظر
// }
// removeChild(2);

// -------

// Dynamic removeChild With Prompt

// const chooseNumber = Number(prompt(""));

// function removeChild(number) {
//   const ul = document.querySelector("ul");
//   const li = document.querySelector(li:nth-child(${number}));
//   ul.removeChild(li); // حذف "المان چایلد" مد نظر
// }
// removeChild(chooseNumber);

// Part 49  -------------------------------------------------------

// className

// const title = document.querySelector("h1");
// console.log(title.className); // "نمایش "کلس" های به شکل "استرینگ // title h1Class

// title.className = "test" // جاگزین "کلس" ها با "کلس" های مد نطر
// console.log(title.className); // test

// title.className = "title h1Class test" // جاگزین "کلس" ها با "کلس" های مد نطر
// console.log(title.className); // title h1Class test

// -------

// classList

// const title = document.querySelector("h1");
// console.log(title.classList); // "نمایش "کلس" های به شکل "دام توکن لیست // DOMTokenList(2) ['title', 'h1Class', value: 'title h1Class']

// ---

// title.classList.add("test"); // "اضافه کردن  "کلس
// console.log(title.className); // title h1Class test

// title.classList.add("test", "test2"); // "اضافه کردن "کلس
// console.log(title.className); // title h1Class test

// ---

// title.classList.remove("h1Class"); // "حذف کردن  "کلس
// console.log(title.className); // title test

// title.classList.remove("h1Class","test"); // "حذف کردن  "کلس
// console.log(title.className); // title test

// ---

// title.classList.toggle("h1Class"); // اگر "کلس" مد نظر بود آن را حذف و ار نبود آن را اضافه میکند
// console.log(title.className); // title test h1Class

// ---

// title.classList.replace("h1Class", "test"); // مقدار اول "کلس" مد نطر | مقدار دوم مقدار جایگزین ) کلس مد نظر را جایگزین میکند )
// console.log(title.className); // title test

// Part 50  -------------------------------------------------------

// Event ( عملی است که میتواند تابعی را برای اجرا در هنگام وقوع یک رویداد فراخوانی کرده و عملی در ازای این فراخوانی انجام دهد )
// مانند
// Click on a Tag or Element
// Type in Input
// Element Hover
// Sending a Form
// Element Size Change
// User Clicked on a Button
// Loading Page ( HTML )
// and more

// -------

// onclick | click

// onclick

// <button onclick="alert('Test')">Test</button> <!-- آن کلیک پراپرتی اچ تی ام ال که میشه توش فانکشنی رو نوشت -->

// ----

// <button id="btn">Test</button> <!-- یا با استفاده از ایونت اینکارو کنیم -->

// const btn = document.getElementById("btn");

// اگر از این روش استفاده کنیم فقط آخرین "آن کلیک" که نوشتیم کار میکند و قبلی ها کار نمیکنند

// کار نمیکند
// btn.onclick = function () {
//   console.log("test");
// };

// فقط اخری کار میکند
// btn.onclick = function () {
//   alert("test");
// };

// ----

// <button onclick="'run()">Test</button> <!-- یا حتی تابعی رو از جاوااسکریپت فراخوانی کرد -->
// function run() {
//   alert("test");
// }

// -------

// click ( Event ) | Event ( click )

// مقدار اول شرایطی که میخواهیم ایونت اجرا شود , مقدار دوم تابعی که میخواهیم در آن شرایط اجرا شود

// <button id="btn">Test</button> <!-- یا با استفاده از ایونت اینکارو کنیم -->
// btn.addEventListener("click", function () {
//   console.log("Hello");
// });

// ----

// "در این روش همه ایونت ها همزمان کار میکند بر خلاف "آن کلیک

// const btn = document.getElementById("btn");

//همه کار میکند

// btn.addEventListener("click", function () {
//   console.log("Hello");
// });

//همه کار میکند

// btn.addEventListener("click", function () {
//   alert("Hello");
// });

// ----

// const btn = document.getElementById("btn");

// میتونیم از "ارو فانکشن" نیز استفاده بکنیم

// btn.addEventListener("click", () => alert("Hello"));

// ----

// const btn = document.getElementById("btn");

// میتونیم "فانکشن" را از قبل تعریف و در "ایونت" فراخوانی کنیم

// function run() {
//   alert("Hello");
// }

// btn.addEventListener("click",run);// در اینجا نباید بعد از فراخوانی تابع پرانتز بزاریم چون تابع اجرا میشود ( ما میخوایم توسط "ایونت" این تابع اجرا شود )

// ----

// const btn = document.getElementById("btn");

// اگر خواستیم "المنتی" را با "دام" پاک کنیم باید "ایونت" آن "المنت" نیز پاک شود

// function run() {
//   alert("Hello");
// }

// btn.addEventListener("click",run);// در اینجا نباید بعد از فراخوانی تابع پرانتز بزاریم چون تابع اجرا میشود ( ما میخوایم توسط "ایونت" این تابع اجرا شود )

// btn.remove();

// btn.removeEventListener("click", run); // ایونت" را حذف میکند"

// Part 51  -------------------------------------------------------

// Mouse Eventclick

// dblclick | contextmenu | mousedown | mouseup | wheel | mouseover | mouseout

// const btn = document.getElementById("btn");

// const onClick = () => console.log("Click Event"); // فانکشن" کلیک"
// btn.addEventListener("click", onClick); // "ایونت کلیک"

// const onDoubleClick = () => console.log("Double Click Event"); // "فانکشن دبل کلیک"
// btn.addEventListener("dblclick", onDoubleClick); // "ایونت دبل کلیک"

// const onRightClick = () => console.log("Right Click Event"); // "فانکشن دبل کلیک"
// btn.addEventListener("contextmenu", onRightClick); //  "ایونت راست کلیک"

// const onMouseDown = () => console.log("Mouse Down Event"); // "فانکشن دبل کلیک"
// btn.addEventListener("mousedown", onMouseDown); //  "ایونت فشار دادن چپ کلیک"

// const onMouseUp = () => console.log("Mouse Up Event"); // "فانکشن دبل کلیک"
// btn.addEventListener("mouseup", onMouseUp); //  "ایونت برداشتن چپ کلیک"

// const onMouseWheel = () => console.log("Mouse Wheel Event"); // "فانکشن چرخیدن اسکرول موس"
// btn.addEventListener("wheel", onMouseWheel); //  "ایونت چرخیدن اسکرول موس"

// const onMouseOver = () => console.log("Mouse Over Event"); // "فانکشن هاور شدن "
// btn.addEventListener("mouseover", onMouseOver); //  "ایونت هاور شدن"

// const onMouseOut = () => console.log("Mouse Out Event"); // "فانکشن خارج شدن از هاور"
// btn.addEventListener("mouseout", onMouseOut); //  "ایونت خارج شدن از هاور"

// Part 52  -------------------------------------------------------

// Event Object ( e | evt | event) | targer | type | timeStamp

// target | type | timeStamp

// const btn = document.getElementById("btn");

// const onClick = (e) => { // آرگومانی که در تابع یک "ایونت" قرار میگیرد له آن "ایونت آبجکت" میگویند و حاوی اطلاعاتی در مورد "ایونت" مربوطه است مثل نوع "ایونت" و غیره

//   console.log(e.target); // تارگت" خود المنت که "ایونت" روش قرار گرفته بوده و اجرا شده را برمیگرداند" | <button id="btn" style="background-color: green;">Button1</button>

//   e.target.style.backgroundColor = "green"; // چون که "تارگت" خروجی مانند "دام" دارد میتوان از "متود" و ویژگی های دام روی آن استفاده کرد
//   console.log(e.type); // تایپ ایونت" را بر میگرداند" | ( Click )
//   console.log(e.timeStamp); // زمان انجام "ایونت" را بر میگرداند ( بر حسب میلی ثانیه ) | ( 739.5 )
// };

// btn.addEventListener("click", onClick);

// -----

// const link = document.getElementById("link");
// const onClick = (e) => {
//   e.preventDefault(); // با این کار میگیم از حالت "دیفالت" استفاده نکن و به اول صفحه نرو و یا صفحه رو "رفرش" نکن
//   console.log(e.target); // <a id="link" href="#">Link</a>
// };

// link.addEventListener("click", onClick);

// Part 53  -------------------------------------------------------

// Keyborad Event | Keyborad Event Object

// Keyborad Event | keypress | keydown | keyup

// const itemInput = document.getElementById("item-input");

// const onkeyPress = () => console.log("Key Press"); // "فانکشن فشار دکمه کیبورد"

// const onkeyDown = () => console.log("Key Down"); // "فانکشن استفاده دکمه کیبورد"
// const onkeyUp = () => console.log("Key Up"); // "فانکشن برداشتن از فشار دکمه کیبورد"

// itemInput.addEventListener("keypress", onkeyPress); // "ایونت فشار دکمه کیبورد"

// itemInput.addEventListener("keydown", onkeyDown); // "ایونت استفاده دکمه کیبورد"
// itemInput.addEventListener("keyup", onkeyUp); // "ایونت برداشتن از فشار دکمه کیبورد"

// -----------------

// Keyborad Event Object | e.shiftKey | e.ctrlKey | e.altKey

// const itemInput = document.getElementById("item-input");

// const onkeyPress = (e) => {
//   console.log(e.key); // "دسترسی به دکمه فشرده شده در "کیبورد

// if (e.key === "h") {
//   console.log("you Press h");
// }

// -----
//   console.log(`Shift ${e.shiftKey}`); // "بررسی فشرده شدن دکمه همراه با "شیفت
//   console.log(`Ctrl ${e.ctrlKey}`); // "بررسی فشرده شدن دکمه همراه با "کنترل
//   console.log(`Alt ${e.altKey}`); // "بررسی فشرده شدن دکمه همراه با "آلت
// };

// itemInput.addEventListener("keypress", onkeyPress);

// Part 54  -------------------------------------------------------

// Input Event | input | change | focus | blur | e.target.value | e.target.checked

// const itemInput = document.getElementById("item-input");
// const lang = document.getElementById("lang");
// const checkbox = document.getElementById("checkbox");

// input | e.target.value
// const onInput = (e) => {
//   console.log(e.target); // <input id="item-input" type="text">
//   console.log(e.target.value); // "دسترسی مقدار وارد شده در "اینپوت
// };
// itemInput.addEventListener("input", onInput); // "ایونت اینپوت"

// input | change
// const onSelect = (e) => {
//   console.log(e.target.value);
// };
// lang.addEventListener("input", onSelect); // ایونت اینپوت" ( برای "تگ سلکت" )"
// lang.addEventListener("change", onSelect); // "ایونت چنج که برای "تگ سلکت

// input | e.target.checked
// const onChecked = (e) => {
//   console.log(e.target.checked); // نتیجه "چک باکس" رو خروجی میده // "true flase"
// };
// checkbox.addEventListener("input", onChecked); // "ایونت اینپوت" برای "چک باکس"

// ---------

// focus
// const itemInput = document.getElementById("item-input");
// const onFocus = () => {
//   console.log("Focus");
// };
// itemInput.addEventListener("focus", onFocus); // "ایونت فوکوس اینپوت"

// blur
// const onBlur = () => {
//   console.log("Not Focus");
// };
// itemInput.addEventListener("blur", onBlur); // "ایونت خارجح شدن از فوکوس اینپوت"

// Part 55  -------------------------------------------------------

// form Event | submit | new FormData() | get() | entries()

// form Event | submit
// const form = document.getElementById("form");
// const input = document.getElementById("input");
// const lang = document.getElementById("lang");

// const onSubmit = (e) => {
//   e.preventDefault(); // "تغییر حالت پیشفرض رفرش صفحه پس از "سابمیت
//   if (input.value === "" || lang.value === "") {
//     alert("Please Fill All Fields");
//     return; // برای اینکه بعد از اجرا شدن این شرط از درون تابع خارج شود و خط های بعدی اجرا نشوند
//   }
//   console.log(input.value, lang.value); // test javascripts
// };

// form.addEventListener("submit", onSubmit);

// ---------

// new FormData() | get() | entries()

// const form = document.getElementById("form");
// const input = document.getElementById("input");
// const lang = document.getElementById("lang");

// const onSubmit = (e) => {
//   e.preventDefault(); // "تغییر حالت پیشفرض رفرش صفحه پس از "سابمیت
//   const formData = new FormData(form); // در اینجا "نیم" "فرم" در "اچ تی ام ال" را قرار میدهیم
// console.log(formData.get("input"),formData.get("lang")); // در اینجا "نیم" "اینپوت" و "سلکت" در "اچ تی ام ال" را قرار میدهیم
// console.log(formData.entries()); // وروردی ها را در قالب یک "آبجکت" بر میگراند و میتوان روی آن "فور آف" استفاده کرد

//   const entries = formData.entries();

//   for (let entry of entries) {
// console.log(entry); // (2) ['input', 'test']
// console.log(entry[0]); // input , lang
// console.log(`${entry[0]} - ${entry[1]}`); // input - test , lang - Javascript
//   }
// };

// form.addEventListener("submit", onSubmit);

// Part 56  -------------------------------------------------------

// Event Bubbling | e.stopPropagation()

// به این معنی است که "ایونت" اعمال شده روی یک "المان" روی تمامی "پرنت" هایش نیز اعمال میشود
// اگر دکمه کلیک بشود در واقع "پرنت" آن نیز کلیک شده و است و این روی تمامی "پرنت" ها تا خود "داکیومنت" اعمال میشود

// const section = document.getElementById("section");
// const div = document.getElementById("div");
// const btn = document.getElementById("btn");

// section.addEventListener("click", () => {
//   console.log("Section Clicked");
// });

// div.addEventListener("click", () => {
//   console.log("Div Clicked");
// });

// btn.addEventListener("click", () => {
//   console.log("Btn Clicked");
// });

// document.body.addEventListener("click", () => {
//   console.log("Body Clicked");
// });

// -------------

// اگر نیاز بود که این اتفاق نیافتد باید از "متود استاپ پروگیشن" بر روی "آبجکت" برگردانده شده توسط "ایونت" استفاده کرد

// btn.addEventListener("click", (e) => {

//   console.log("Btn Clicked");
//   e.stopPropagation();
// });

// section.addEventListener("click", () => {
//   console.log("Section Clicked");
// });

// div.addEventListener("click", () => {
//   console.log("Div Clicked");
// });

// document.body.addEventListener("click", () => {
//   console.log("Body Clicked");
// });

// Part 57  -------------------------------------------------------

// Event Delegation
// مدیریت رویداد ها

// "دادن "ایونت" با استفاده از "فور ایچ
// const listItem = document.querySelectorAll("li");
// listItem.forEach((item) => {
//   item.addEventListener("click", (e) => {
//     e.target.style.color = "red";
//   });
// });

// "دادن "ایونت" به "پرنت
// const list = document.querySelector("ul");

// list.addEventListener("click", (e) => {
//   e.target.style.color = "lime";
// });

// Part 58  -------------------------------------------------------

// window Event | onload | load | DOMContentLoaded | window.innerWidth | window.innerHeight | window.scrollX | window.scrollY

// <head>
//     <!-- <script src="./script.js"></script> --> // اگر فایل اسکریپت در "تگ" "هد" "لود" شود تغییرات "دام" نمیتواند اعمال شود زیرا قبل از خوانده شدن "تگ" ها تغییرات اعمال میشود
//     <!-- <script defer src="./script.js"></script> --> // مگر اینکه از "اتربیوت" "دیفر" استفاده کنیم تا بعد از خوانده شدن "اچ تی ام ال" "اسکریپت" "لود" شود
// </head>

// window Event | onload | load | DOMContentLoaded

// window.onload = function () { // ایونت آن لود" که در پس از "لود" شدن اجرا میشود"
//   document.querySelector("h1").textContent = "hello";
// };

// window.addEventListener("load", () => { // ایونت لود" که مانند "آن لود" عمل میکند"
//   document.querySelector("h1").textContent = "hello";
//   console.log('Page Loaded');
// });

// window.addEventListener("DOMContentLoaded", () => { // ایونت دام کانتنت لودد" که پس از خوانده شدن "داکیومنت" اجرا میشود که از "آن لود" و "لود" سریعتر اجرا میشود"
//   document.querySelector("h1").textContent = "hello";
//   console.log('Dom  Loaded');
// });

// console.log("Run..."); // سریعتر از "دام کانتنت لودد","آن لود" و "لود" اجرا میشود

// --------------

// window.innerWidth | window.innerHeight

// window.addEventListener("resize", () => { // ایونت ریساز" که بعد از تغییر سایز صفحه اتفاق میوفتد"
//   console.log(window.innerWidth , window.innerHeight); // عرض داخلی و ارتفاع داخلی مرورگر
// });

// --------------

// window.scrollX | window.scrollY

// window.addEventListener("scroll", () => { // ایونت اسکرول" که بعد از اسکرول صفحه اتفاق میوفتد"
//   console.log(window.scrollX,window.scrollY); // اسکرول" افقی و عمودی مرورگر"

//   if(window.scrollY > 70 ){
//     document.body.style.backgroundColor = "white"
//     document.body.style.color = "black"
//   } else{
//     document.body.style.backgroundColor = "black"
//     document.body.style.color = "white"
//   }
// });

// Part 59  -------------------------------------------------------

// module | export & import
// ما میتوانیم در فایل های "اسکریپت" از دو کلمه کلیدی به نام
// اکسپورت" ( تابع و یا متغیر مد نظر را از فایل خروجی گرفته )"
// ایمپورت" ( از فایل دیگه ای تابع یا متغیری را وارد کرده ) "
// استفاده کنیم که بعد استفاده از این و کلمه آن فایل "اسکریپت" به یک ماژول تبدیل میشود

// in script.js
// export const firstName = "Alireza";

// Hint
// و در زمانی که ماژول داشته باشیم باید در "اچ تی ام ال" در جایی که فایل "اسکریپت" که ماژول است را "لینک" شده است "تایپ" آن را برابر با ماژول قرار دهیم تا مرورگر متوجه شود و "ارور" ندهد
// Uncaught SyntaxError: Cannot use import statement outside a module
// <script src="./script.js" type="module"></script>

// و در زمانی که از ماژول استفاده میکنیم باید در یک سرور و یا "آی پی" باشیم زیرا در "لوکال هاست" در زمان استفاده از ماژول از طرف مرورگر "ارور کراس پرایوسی" میگیریم
// from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes

// -------

// in app.js
// import {firstName} from "./script.js"
// console.log(firstName);

// Hint
// و در زمانی که ماژول داشته باشیم باید در "اچ تی ام ال" در جایی که فایل "اسکریپت" که ماژول است را "لینک" شده است "تایپ" آن را برابر با ماژول قرار دهیم تا مرورگر متوجه شود و "ارور" ندهد
// Uncaught SyntaxError: Cannot use import statement outside a module
// <script src="./app.js" type="module"></script>

// و در زمانی که از ماژول استفاده میکنیم باید در یک سرور و یا "آی پی" باشیم زیرا در "لوکال هاست" در زمان استفاده از ماژول از طرف مرورگر "ارور کراس پرایوسی" میگیریم
// from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes

// Part 60  -------------------------------------------------------
